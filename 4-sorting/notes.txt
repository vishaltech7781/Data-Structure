Selection sort:
    select the minimum from the array and swap it with the first element and now sort the remaining array without the first index.
    get the next min and swap it with second element of array
    *****
     ****
      ***
       ** (array indexes iterated)

Bubble sort:
    push the largest element to the last.
    2 element pairs are swapped at first over the whole array pushing the largest to the last
    then as the largest element is at the last we ignore it in the second iteration
    *****
    ****
    ***
    **   (array indexes iterated)

Insertion Sort:
    in each outer iteration we take the first elem, first 2 elems,first 3 elems....whole array as one sub array
    in the inner iteration / sub array we compare and swap(if neccessary) the largest and the second largest index element an slide a pair down in the indexing till the whole sub array is sorted
    comparison and swap occurs for the whole sub array 
    **
    ***
    ****
    *****(array indexes iterated)

Quick Sort:
    Pick up any element (pivot) and place it inits correct position.All the other elements arrange by smaller on the left and larger on the right.
    To place any element at its correct space, 
    base-condition: i<j .... if is false ie. if(fe>=le) return;
        1. select any element as pivot.
        2. start from the first element as 'i' and last element as 'j'
        3. find the first element from the left (i) that is greater than the pivot and stop. i++
        4. find the first element from the right (j) that is smaller than the pivot and stop. j--
        5. Swap elements of indexes, i and j
        6. again start from existing places of i and j, and find the larger from left and smaller than pivot from right.
        7. Continue this untill 'i<j' and stop.
        8. Swap pivot and 'j'   //jar i sobat swap kela tar motha element at i th index lesser ja side la jaun padnar mhanun lesser cha side la alela j pivot sobat swap karaycha
        9. Assign j as the new Partition index
        10. Use recursion to sort smaller arrays, 'fe to pi-1' and 'pi+1 to le' 

